<?php
/**
 * URL Shortener - main module file. All hooks go here.
 */

/**
 * Implements hook_init().
 */
function url_shortener_init() {
  // Check if the request is for a URL expansion or a page on the normal
  // website (the main form, or a Drupal page).
  // If normal website, we use the 'www' subdomain.
  // If a URL expansion is wanted, use the host name without 'www'.

  // Include the class that encapsulates a URL-code pair (and thus also a
  // database record).
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'url_shortener') . '/ShortUrl.inc';

  // Check if the requester is attempting a URL expansion.
  // If so, the URL should not begin with 'www'.
  $host = $_SERVER['HTTP_HOST'];
  if (substr($host, 0, 4) != 'www.') {

    // Check if the request looks like a code.
    $request_uri = trim($_SERVER['REQUEST_URI'], '/');

    if (preg_match('/^[' . ShortUrl::BASE32_DIGITS . ']+$/', $request_uri)) {
      // Lookup the URL.
      $short_url = ShortUrl::lookupByCode($request_uri);

      if ($short_url) {
        // Boom - URL expanded.
        drupal_goto($short_url->url());
      }
    }

    // Redirect to www.
    $scheme = empty($_SERVER['HTTPS']) ? 'http' : 'https';
    drupal_goto("$scheme://www.$host/$request_uri");
  }
}

/**
 * Implements hook_menu().
 */
function url_shortener_menu() {
  $items['shorten'] = array(
    'description' => t("Go here to shorten a URL."),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('url_shortener_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['shorten/ajax'] = array(
    'page callback' => 'url_shortener_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Main form for shortening URLs.
 *
 * @return array
 */
function url_shortener_form() {
  $form['error_msg'] = array(
    '#markup' => "<div id='error-msg'></div>",
  );
  $form['long_url'] = array(
    '#type' => 'textfield',
    '#title' => t("1. Paste your embarrassingly long URL here &darr;"),
  );
  $form['squish'] = array(
    '#type' => 'button',
    '#value' => t("Squish"),
    '#prefix' => "<div id='squish-btn-wrapper'><label for='edit-squish' id='button-label'>" . t("2. Click this sexy button &rarr;") . " </label>",
    '#suffix' => "</div>",
  );
  $form['short_url'] = array(
    '#type' => 'textfield',
    '#title' => t("3. Copy your super-cute short URL from here &darr;"),
  );
  $form['msg'] = array(
    '#markup' => "<label>" . t("4. Have an awesome day :)") . "</label>",
  );
  $form['#attached']['js'][] = drupal_get_path('module', 'url_shortener') . '/js/url_shortener.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'url_shortener') . '/css/url_shortener.css';
  return $form;
}

/**
 * AJAX callback for URL shortening.
 */
function url_shortener_ajax() {
  // Grab the URL from the query string.
  // Won't sanitise here, to preserve the provided URL - Drupal's DB API will
  // protect the database when we insert the URL later.
  $url = !empty($_GET['url']) ? $_GET['url'] : FALSE;

  // Check a URL was provided.
  if (!$url) {
    // Return JSON.
    echo json_encode(array('error' => t("Please paste a valid URL in the long URL field.")));
    return;
  }

  // If it doesn't begin with http:// or https://, append http:// by default.
  if (substr($url, 0, 7) != 'http://' && substr($url, 0, 8) != 'https://') {
    $url = "http://$url";
  }

  // Double-check it's actually a URL.
  $url_info = @parse_url($url);

  if (!$url_info) {
    // Return JSON.
    echo json_encode(array('error' => t("Please paste a valid URL in the long URL field.")));
    return;
  }

  // Did we already do this one?
  $short_url = ShortUrl::lookupByUrl($url);

  if ($short_url) {
    // Yes, we did. Return the existing code.
    echo json_encode(array('code' => $short_url->code()));
    return;
  }

  // Add it to the database.
  $short_url = new ShortUrl($url);
  $short_url->save();

  // Send the new code to the client.
  echo json_encode(array('code' => $short_url->code()));
}
