<?php
/**
 * URL Shortener - main module file. All hooks go here.
 */

/**
 * Constant to define valid characters (digits) in a shortened URL code.
 * Use my triacontakaidecimal (base-32) number system (no TOIL).
 * Like other URL-shortening services, a base-62 system could be used that would
 * include all upper- and lower-case letters, but MySQL is case-insensitive out
 * of the box, so this will do for now. At least with this system the digits are
 * more likely to be transposed correctly if written.
 *
 * @var string
 */
define('URLSHORT_CHARS', '0123456789ABCDEFGHJKMNPQRSUVWXYZ');

/**
 * Implements hook_init().
 */
function urlshort_init() {
  // Check if the request is for a URL expansion or a page on the normal
  // website (the main form, or a Drupal page).
  // If normal website, we use the 'www' subdomain.
  // If a URL expansion is wanted, use the host name without 'www'.

  // Check if the requester is attempting a URL expansion.
  // If so, the URL should not begin with 'www'.
  $host = $_SERVER['HTTP_HOST'];
  if (substr($host, 0, 4) != 'www.') {

    // Check if the request looks like a code.
    $request_uri = trim($_SERVER['REQUEST_URI'], '/');
    if (preg_match('/^[' . URLSHORT_CHARS . ']+$/', $request_uri)) {
      // Lookup the URL.
      $url = urlshort_lookup_url($request_uri);
      if ($url) {
        // Boom - URL expanded.
        drupal_goto($url);
      }
    }

    // Redirect to www.
    $scheme = empty($_SERVER['HTTPS']) ? 'http' : 'https';
    drupal_goto("$scheme://www.$host/$request_uri");
  }
}

/**
 * Implements hook_menu().
 */
function urlshort_menu() {
  $items['shorten'] = array(
    'description' => t("Go here to shorten a URL."),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('urlshort_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['shorten/ajax'] = array(
    'page callback' => 'urlshort_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Main form for shortening URLs.
 *
 * @return array
 */
function urlshort_form() {
  $form['error_msg'] = array(
    '#markup' => "<div id='error-msg'></div>",
  );
  $form['long_url'] = array(
    '#type' => 'textfield',
    '#title' => t("1. Paste your embarrassingly long URL here &darr;"),
  );
  $form['go'] = array(
    '#type' => 'button',
    '#value' => t("Squish"),
    '#prefix' => "<div id='go-btn-wrapper'><label for='edit-go' id='button-label'>" . t("2. Click this sexy button &rarr;") . " </label>",
    '#suffix' => "</div>",
  );
  $form['short_url'] = array(
    '#type' => 'textfield',
    '#title' => t("3. Copy your super-cute short URL from here &darr;"),
  );
  $form['msg'] = array(
    '#markup' => "<label>" . t("4. Have an awesome day :)") . "</label>",
  );
  $form['#attached']['js'][] = drupal_get_path('module', 'urlshort') . '/js/urlshort.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'urlshort') . '/css/urlshort.css';
  return $form;
}

/**
 * Get the URL matching a short code.
 *
 * @param string $code
 *   The code from the shortened URL.
 *
 * @return string
 *   The URL or FALSE if not found.
 */
function urlshort_lookup_url($code) {
  $url = db_select('urlshort', 'u')
    ->fields('u', array('url'))
    ->condition('code', $code)
    ->execute()
    ->fetchField();
  return empty($url) ? FALSE : $url;
}

/**
 * Get the code matching a URL.
 *
 * @param string $url
 *   The original URL.
 *
 * @return string
 *   The code or FALSE if not found.
 */
function urlshort_lookup_code($url) {
  $code = db_select('urlshort', 'u')
    ->fields('u', array('code'))
    ->condition('url', $url)
    ->execute()
    ->fetchField();
  return empty($code) ? FALSE : $code;
}

/**
 * Increments the provided code.
 *
 * @param string $code
 * @return string
 */
function urlshort_inc_code($code) {
  // Can't use [] character indexing with constants, so copy to a var.
  $urlshort_chars = URLSHORT_CHARS;

  // Get the last/max digit. This approach permits changes to charset.
  $last_digit = $urlshort_chars[strlen($urlshort_chars) - 1];

  // Find index of digit in $code to increment.
  $found = FALSE;
  $code_len = strlen($code);
  $n = $code_len - 1;
  while ($n >= 0) {
    $ch = $code[$n];
    if ($ch != $last_digit) {
      $found = TRUE;
      break;
    }
    $n--;
  }

  if ($found) {
    // Get the integer value of the character at position $n.
    $x = strpos($urlshort_chars, $ch);

    // Get next digit.
    $ch2 = $urlshort_chars[$x + 1];

    // Assemble new code.
    $new_code = substr($code, 0, $n) . $ch2 . str_repeat('0', $code_len - $n - 1);
  }
  else {
    // Increase code length by 1.
    $new_code = '1' . str_repeat('0', $code_len);
  }

  return $new_code;
}

/**
 * AJAX callback for URL shortening.
 */
function urlshort_ajax() {
  // Grab the URL from the query string.
  // Won't sanitise here, to preserve the provided URL - Drupal's DB API will
  // protect the database when we insert the URL later.
  $url = !empty($_GET['url']) ? $_GET['url'] : FALSE;

  // Check a URL was provided.
  if (!$url) {
    // Return JSON.
    echo json_encode(array('error' => t("Please paste a valid URL in the long URL field.")));
    return;
  }

  // We will, however, check it's actually a URL.
  $url_info = @parse_url($url);
  if (!$url_info) {
    // Return JSON.
    echo json_encode(array('error' => t("Please paste a valid URL in the long URL field.")));
    return;
  }

  // Did we already do this one?
  $code = urlshort_lookup_code($url);
  if ($code) {
    // Yes, we did. Return the existing code.
    echo json_encode(array('code' => $code));
    return;
  }

  // Get the last code created.
  $last_code = variable_get('urlshort_last_code', NULL);

  // If not found in the persistent variable, fall back to looking in the short
  // URL table. Should only happen once.
  if (!$last_code) {
    $last_code = db_query('select code from urlshort order by id desc limit 1')
      ->fetchField();
  }

  // Get the next code.
  if (!$last_code) {
    // First one! Should only happen once.
    $next_code = '1';
  }
  else {
    // Add 1 to last code.
    $next_code = urlshort_inc_code($last_code);
  }

  // Add it to the database.
  db_insert('urlshort')
    ->fields(array(
      'code' => $next_code,
      'url' => $url,
    ))
    ->execute();

  // Remember this new code as the last one created.
  variable_set('urlshort_last_code', $next_code);

  // Send the code to the client.
  echo json_encode(array('code' => $next_code));
}
